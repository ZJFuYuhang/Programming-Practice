### 解题思路
此处撰写解题思路
双百分百击败，动态规划
后一状态为前一状态的dp[]取最大，以及能用当前num的dp与num之和。
### 代码

```cpp
class Solution {
public:
    int massage(vector<int>& nums) {
        int dp[2] = {0,0};              //0 this can use ,1 this can't use
        int isize = nums.size();
        if(!isize) return 0 ;
        for(int i = 0;i<isize;i++){
            int tdp[2] = {dp[0]>dp[1]?dp[0]:dp[1],dp[0]+nums[i]};
            dp[0] = tdp[0];
            dp[1] = tdp[1];
        }
        return dp[0]>dp[1]?dp[0]:dp[1];
    }
};
